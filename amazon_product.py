# -*- coding: utf-8 -*-
"""Amazon_product.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n3WA0Uz_Zq0asRqvdK1Hcjn3kR2wfKT4
"""

!pip install vadersentiment

import string
import spacy
import io
from google.colab import files
import pandas as pd
import numpy as np
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
from sklearn import metrics
from matplotlib import pyplot as plt
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import LinearSVC
import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer

uploaded = files.upload()

df = pd.read_csv(io.BytesIO(uploaded['amazon_alexa.tsv']),sep='\t')
df.head()

print('The given dataset consists of {} rows and {} columns'.format(df.shape[0], df.shape[1]))

df.rating.isnull().value_counts()
df.verified_reviews.isnull().value_counts()
df.feedback.isnull().value_counts()




sid = SentimentIntensityAnalyzer()

df['scores'] = df['verified_reviews'].apply(lambda reviews: sid.polarity_scores(reviews))
df['compound'] = df['scores'].apply(lambda d:d['compound'])
df['positive'] = df['scores'].apply(lambda d:d['pos'])
df['negative'] = df['scores'].apply(lambda d:d['neg'])
df['neutral'] = df['scores'].apply(lambda d:d['neu'])

df['final_scores'] = df['compound'].apply(lambda   score: 'pos' if score>0 else 'neg')   #('neu' if score==0 else 'neg')



X = df['verified_reviews']       # Independent variable
y = df['final_scores']           # Dependent variable

X_train,X_test,y_train,y_test  = train_test_split(X,y, test_size=0.30, random_state=42)

print(confusion_matrix(X_train, y_train))

text_clf = Pipeline([('tfidf',TfidfVectorizer()),
                     ('clf',LinearSVC())])


text_clf.fit(X_train, y_train)

''' Prediction of X_test '''
prediction = text_clf.predict(X_test)

print('The Confusion Matrix is \n{}'.format(confusion_matrix(y_test, prediction)),'\n\n\n')
print('The Classification Report is \n {}'.format(classification_report(y_test,prediction)),'\n\n\n')
print('The Accuracy is \n {}'.format(accuracy_score(y_test,prediction)),'\n\n\n')




'''

                  ------- To Predict the Dependent Variable -------  
text_clf.predict(['<Use your own sentences to check for positive or negative values>'])



''''
